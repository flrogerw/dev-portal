
# this file is automatically generated
# do not modify it directly 

openapi: 3.0.1
components:
  parameters:
    Accept-Language:
      description: Language
      in: header
      name: Accept-Language
      required: true
      schema:
        type: string
    Aud-Correlation-Id:
      description: Correlation ID
      in: header
      name: Aud-Correlation-Id
      required: true
      schema:
        type: string
    Aud-Platform:
      description: Client platform
      in: header
      name: Aud-Platform
      required: true
      schema:
        enum:
          - MOBILE
          - WEB
        type: string
    Aud-Platform-Variant:
      description: Variant of a Client
      in: header
      name: Aud-Platform-Variant
      required: true
      schema:
        enum:
          - ANDROID
          - IOS
          - NONE
        type: string
    Aud-Session-Id:
      description: Session ID
      in: header
      name: Aud-Session-Id
      required: true
      schema:
        type: string
    Aud-Uuid:
      description: Audacy UUID
      in: header
      name: Aud-Uuid
      required: true
      schema:
        type: string
    SearchLimit:
      description: Starting page for pagination
      in: query
      name: limit
      required: false
      schema:
        type: integer
    SearchPage:
      description: The maximum numbers of items to return in query
      in: query
      name: page
      required: false
      schema:
        type: integer
  responses:
    ErrorResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorObject'
      description: Error
    FollowsResponse:
      content:
        application/json:
          schema:
            items:
              type: string
            type: array
      description: OK
    ProfileDeleteResponse:
      content:
        application/json:
          schema:
            properties:
              Deleted:
                type: string
            type: object
      description: API response from DELETE user.
    ProfileGetResponse:
      content:
        application/json:
          schema:
            properties:
              profile:
                allOf:
                  - $ref: '#/components/schemas/UserProfile'
                  - $ref: '#/components/schemas/UserResponseExtras'
                type: object
            type: object
      description: API response for GET a user.
    ProfilePatchResponse:
      content:
        application/json:
          schema:
            properties:
              profile:
                allOf:
                  - $ref: '#/components/schemas/UserProfile'
                  - $ref: '#/components/schemas/UserResponseExtras'
            type: object
      description: API response for PATCH a user.
    ProfilePostResponse:
      content:
        application/json:
          schema:
            properties:
              profile:
                allOf:
                  - $ref: '#/components/schemas/UserProfile'
                  - $ref: '#/components/schemas/UserResponseExtras'
                type: object
      description: API response from POST new user.
    QueueResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Queue'
      description: OK
    RecentsResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/RecentsCollection'
              type: array
      description: The list of recently listened content items
    ExperienceChaptersResponse:
      content:
        application/json:
          schema:
            properties:
              results:
                items:
                  $ref: '#/components/schemas/Chapter'
                type: array
            required:
              - results
            type: object
      description: OK
    ExperienceContentPostResponse:
      content:
        application/json:
          schema:
            properties:
              content:
                additionalProperties:
                  oneOf:
                    - $ref: '#/components/schemas/AudioClip'
                    - $ref: '#/components/schemas/Episode'
                    - $ref: '#/components/schemas/Tag'
                    - $ref: '#/components/schemas/Station'
                    - $ref: '#/components/schemas/Show'
                    - $ref: '#/components/schemas/AudioClipSummary'
                    - $ref: '#/components/schemas/TagSummary'
                    - $ref: '#/components/schemas/StationSummary'
                    - $ref: '#/components/schemas/ShowSummary'
                    - $ref: '#/components/schemas/EpisodeSummary'
                  x-additionalPropertiesName: contentId
                type: object
              errors:
                additionalProperties:
                  properties:
                    deleted:
                      type: boolean
                    notFound:
                      type: boolean
                  required:
                    - deleted
                    - notFound
                  type: object
                  x-additionalPropertiesName: contentId
                type: object
            required:
              - content
              - errors
            type: object
      description: OK
    ExperienceContentViewResponse:
      content:
        application/json:
          schema:
            properties:
              content:
                additionalProperties:
                  oneOf:
                    - $ref: '#/components/schemas/AudioClipSummary'
                    - $ref: '#/components/schemas/TagSummary'
                    - $ref: '#/components/schemas/StationSummary'
                    - $ref: '#/components/schemas/ShowSummary'
                    - $ref: '#/components/schemas/EpisodeSummary'
                  x-additionalPropertiesName: contentId
                type: object
              contentObj:
                oneOf:
                  - $ref: '#/components/schemas/AudioClip'
                  - $ref: '#/components/schemas/Episode'
                  - $ref: '#/components/schemas/Tag'
                  - $ref: '#/components/schemas/Station'
                  - $ref: '#/components/schemas/Show'
              featuredPlayable:
                $ref: '#/components/schemas/FeaturedPlayable'
              id:
                format: viewId
                type: string
              modules:
                items:
                  $ref: '#/components/schemas/ViewModule'
                type: array
              type:
                $ref: '#/components/schemas/ViewType'
            required:
              - id
              - type
              - contentObj
            type: object
      description: OK
    ExperienceEpisodesResponse:
      content:
        application/json:
          schema:
            properties:
              limit:
                description: Total number of episodes per page
                type: number
              page:
                type: number
              results:
                items:
                  $ref: '#/components/schemas/Episode'
                type: array
              total:
                description: Total number of episodes
                type: number
            required:
              - results
              - total
            type: object
      description: OK
    ExperienceFollowsResponse:
      content:
        application/json:
          schema:
            properties:
              categories:
                items:
                  properties:
                    content:
                      items:
                        oneOf:
                          - $ref: '#/components/schemas/StationSummary'
                          - $ref: '#/components/schemas/ShowSummary'
                          - $ref: '#/components/schemas/TagSummary'
                        properties:
                          viewId:
                            format: viewId
                            type: string
                          viewType:
                            $ref: '#/components/schemas/ViewType'
                        required:
                          - viewId
                          - viewType
                        type: object
                      type: array
                    title:
                      type: string
                  required:
                    - content
                    - title
                  type: object
                type: array
            required:
              - categories
            type: object
      description: OK
    ExperienceScheduleResponse:
      content:
        application/json:
          schema:
            properties:
              schedule:
                items:
                  $ref: '#/components/schemas/ScheduleItem'
                type: array
            required:
              - schedule
            type: object
      description: OK
    ExperienceViewResponse:
      content:
        application/json:
          schema:
            properties:
              content:
                additionalProperties:
                  oneOf:
                    - $ref: '#/components/schemas/AudioClipSummary'
                    - $ref: '#/components/schemas/TagSummary'
                    - $ref: '#/components/schemas/StationSummary'
                    - $ref: '#/components/schemas/ShowSummary'
                    - $ref: '#/components/schemas/EpisodeSummary'
                  x-additionalPropertiesName: contentId
                type: object
              id:
                format: viewId
                type: string
              modules:
                items:
                  $ref: '#/components/schemas/ViewModule'
                type: array
              type:
                $ref: '#/components/schemas/ViewType'
            required:
              - id
              - type
            type: object
      description: OK
    GlobalNavigationResponse:
      content:
        application/json:
          schema:
            properties:
              featureFlags:
                properties:
                  auth:
                    type: boolean
                  queue:
                    type: boolean
                  follows:
                    type: boolean
                  search:
                    type: boolean
                  stories:
                    type: boolean
                type: object
              global:
                properties:
                  contactAudacy:
                    format: viewId
                    type: string
                  player:
                    format: viewId
                    type: string
                  privacyLegal:
                    format: viewId
                    type: string
                  profileAccount:
                    format: viewId
                    type: string
                  profileLocation:
                    format: viewId
                    type: string
                  profileNotification:
                    format: viewId
                    type: string
                  profileOpenSource:
                    format: viewId
                    type: string
                  profileOverview:
                    format: viewId
                    type: string
                  profileSecurity:
                    format: viewId
                    type: string
                  queue:
                    format: viewId
                    type: string
                  schedule:
                    format: viewId
                    type: string
                  search:
                    format: viewId
                    type: string
                required:
                  - contactAudacy
                  - player
                  - privacyLegal
                  - profileAccount
                  - profileLocation
                  - profileNotification
                  - profileOpenSource
                  - profileOverview
                  - profileSecurity
                  - queue
                  - schedule
                  - search
                type: object
              tabs:
                items:
                  $ref: '#/components/schemas/NavigationTab'
                  type: object
                minItems: 1
                type: array
            required:
              - tabs
              - global
            type: object
      description: OK
    NowPlayingResponse:
      content:
        application/json:
          schema:
            additionalProperties:
              nullable: true
              properties:
                artist:
                  description: Artist of currently playing segment
                  type: string
                image:
                  description: Image of currently playing segment
                  format: imageUrl
                  type: string
                playingUntil:
                  description: Supports "live until" functionality
                  format: ISO-8601
                  type: string
                title:
                  description: Title of currently playing segment
                  type: string
              type: object
              x-additionalPropertiesName: contentId
            type: object
      description: OK
    SearchResponse:
      content:
        application/json:
          schema:
            properties:
              results:
                items:
                  $ref: '#/components/schemas/SearchResult'
                type: array
              totalResults:
                type: number
            required:
              - results
              - totalResults
            type: object
      description: OK
    SearchSuggestedTermsResponse:
      content:
        application/json:
          schema:
            properties:
              suggestedTerms:
                items:
                  type: string
                type: array
            required:
              - suggestedTerms
            type: object
      description: OK
    ExperienceStoriesResponse:
      content:
        application/json:
          schema:
            properties:
              content:
                additionalProperties:
                  oneOf:
                    - $ref: '#/components/schemas/AudioClipSummary'
                    - $ref: '#/components/schemas/CollectionSummary'
                    - $ref: '#/components/schemas/EpisodeSummary'
                    - $ref: '#/components/schemas/ShowSummary'
                  x-additionalPropertiesName: contentId
                type: object
              stories:
                items:
                  oneOf:
                    - $ref: '#/components/schemas/StoryCollection'
                    - $ref: '#/components/schemas/StoryLiveEpisode'
                type: array
            required:
              - stories
            type: object
      description: OK
  schemas:
    DomainId:
      description: ID of domain processing request
      enum:
        - CHAT
        - EXPERIENCE
        - GATEWAY
        - IDENTITY
        - MARCONI
      type: string
    ErrorObject:
      properties:
        auxData:
          description: >
            An optional object that allows API developers

            to add custom data to the object to provide

            a more detailed relating to the issue.

            Note: for MVP, these will not be actioned upon by any other service
            -

            in the future, these auxData schemas should be defined on a
            per-domain basis.
          type: object
        code:
          $ref: '#/components/schemas/HttpStatus'
        correlationId:
          description: Correlation ID of request
          format: correlationId
          type: string
        domain:
          $ref: '#/components/schemas/DomainId'
        errors:
          description: |
            Allows the addition of errors of downstream dependencies attached
            to the service resolving the request to be added to the array.
          items:
            properties:
              auxData:
                description: >
                  An optional object that allows API developers

                  to add custom data to the object to provide

                  a more detailed relating to the issue.

                  Note: for MVP, these will not be actioned upon by any other
                  service -

                  in the future, these auxData schemas should be defined on a
                  per-domain basis.
                type: object
              code:
                $ref: '#/components/schemas/HttpStatus'
                description: HTTP status code
              domain:
                $ref: '#/components/schemas/DomainId'
              message:
                description: Human-readable description of error
                type: string
              status:
                $ref: '#/components/schemas/HttpStatusString'
            type: object
          type: array
        message:
          description: Human-readable description of error
          type: string
        sessionId:
          description: Generated from the originator
          format: sessionId
          type: string
        status:
          $ref: '#/components/schemas/HttpStatusString'
      required:
        - correlationId
        - code
        - status
      type: object
    HttpStatus:
      description: Standard HTTP status code
      enum:
        - 200
        - 201
        - 204
        - 301
        - 307
        - 308
        - 304
        - 400
        - 401
        - 403
        - 404
        - 408
        - 422
        - 429
        - 500
        - 502
        - 503
        - 504
      type: number
    HttpStatusString:
      description: Human-readable status key
      enum:
        - OK
        - CREATED
        - NO_CONTENT
        - MOVED_PERMANENTLY
        - TEMPORARY_REDIRECT
        - PERMANENT_REDIRECT
        - NOT_MODIFIED
        - BAD_REQUEST
        - UNAUTHORIZED
        - FORBIDDEN
        - NOT_FOUND
        - REQUEST_TIMEOUT
        - UNPROCESSABLE_ENTITY
        - TOO_MANY_REQUESTS
        - INTERNAL_SERVER_ERROR
        - BAD_GATEWAY
        - SERVICE_UNAVAILABLE
        - GATEWAY_TIMEOUT
      type: string
    Queue:
      description: >-
        The queue object with the current playable episode and all the queued
        episodes
      properties:
        currentId:
          format: contentId
          title: The id of the current queue episode
          type: string
        itemIds:
          items:
            format: contentId
            type: string
          title: The list of the queue episodes ids
          type: array
      required:
        - currentId
        - itemIds
    RecentsCollection:
      allOf:
        - $ref: '#/components/schemas/RecentsItem'
      title: A collection of recently listened content
    RecentsItem:
      properties:
        id:
          type: string
        time:
          type: integer
      title: An item of recently listened content
    UserProfile:
      description: API response from GET user profile.  Returns a users entire profile.
      properties:
        accountNickname:
          description: User's friendly name for account.
          type: string
        dateOfBirth:
          description: Date of birth in format (MM/DD/YYYY)
          pattern: >-
            ^([0-9]{4}[-]?((0[13-9]|1[012])[-]?(0[1-9]|[12][0-9]|30)|(0[13578]|1[02])[-]?31|02[-]?(0[1-9]|1[0-9]|2[0-8]))|([0-9]{2}(([2468][048]|[02468][48])|[13579][26])|([13579][26]|[02468][048]|0[0-9]|1[0-6])00)[-]?02[-]?29)$
          type: string
        emailAddress:
          description: User's email address.
          maxLength: 100
          minLength: 3
          pattern: ^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$
          type: string
        firstName:
          description: User's first name.
          type: string
        gender:
          description: User's perfered gender
          enum:
            - MALE
            - FEMALE
            - NON_BINARY
            - PREFER_NOT_TO_SAY
          type: string
        lastName:
          description: User's last name.
          type: string
        notifications:
          description: Type of marketing communications for the user.
          items:
            enum:
              - AUDACY_PUSH
              - AUDACY_EMAIL
            type: string
          type: array
        userId:
          format: uuid
          pattern: >-
            ^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}
          type: string
        userType:
          description: Type of customer.
          enum:
            - CONSUMER
            - CURATOR
            - HOST
            - ARTIST
            - AUTHOR
          type: string
        zipCode:
          description: Zip code of the user.
          maxLength: 10
          minLength: 5
          pattern: ^\d{5}(?:[-\s]\d{4})?$
          type: string
      type: object
    UserResponseExtras:
      properties:
        avatarUrl:
          maxLength: 256
          minLength: 10
          type: string
        created:
          description: Time of user's registration.  In epoch time milliseconds.
          format: int32
          type: integer
        lastLogin:
          description: Time of user's last login.  In epoch time milliseconds.
          format: int32
          type: integer
        modified:
          description: Time of last modification.  In epoch time milliseconds.
          format: int32
          type: integer
      type: object
    AudioClip:
      allOf:
        - $ref: '#/components/schemas/PlayableBase'
      properties:
        description:
          type: string
        duration:
          format: seconds
          type: number
        entitySubtype:
          $ref: '#/components/schemas/EntitySubtypeAudioClip'
        image:
          type: string
        imageAlt:
          type: string
        metaDescription:
          type: string
        metaTitle:
          type: string
        parentId:
          description: ID of associated parent
          format: contentId
          type: string
        publishDate:
          format: ISO-8601
          type: string
        streamUrls:
          $ref: '#/components/schemas/StreamUrls'
      required:
        - entitySubtype
        - streamUrls
      type: object
    AudioClipSummary:
      allOf:
        - $ref: '#/components/schemas/ContentSummaryBase'
      properties:
        duration:
          format: seconds
          type: number
        entitySubtype:
          $ref: '#/components/schemas/EntitySubtypeAudioClip'
        image:
          type: string
        imageAlt:
          type: string
        parentId:
          description: ID of associated parent
          format: contentId
          type: string
        publishDate:
          format: ISO-8601
          type: string
      required:
        - entitySubtype
      type: object
    CarouselType:
      enum:
        - SMALL
      type: string
    Chapter:
      properties:
        endTime:
          format: unix-epoch
          type: number
        startTime:
          format: unix-epoch
          type: number
        title:
          type: string
      required:
        - endTime
        - startTime
        - title
      type: object
    Collection:
      allOf:
        - $ref: '#/components/schemas/ContainerBase'
      properties:
        children:
          items:
            format: contentId
            type: string
          type: array
        entitySubtype:
          $ref: '#/components/schemas/EntitySubtypeCollection'
        image:
          format: imageUrl
          type: string
        imageAlt:
          type: string
        title:
          type: string
      required:
        - children
        - entitySubtype
        - title
    CollectionSummary:
      allOf:
        - $ref: '#/components/schemas/ContentSummaryBase'
      properties:
        children:
          items:
            format: contentId
            type: string
          type: array
        entitySubtype:
          $ref: '#/components/schemas/EntitySubtypeCollection'
        image:
          format: imageUrl
          type: string
        imageAlt:
          type: string
        title:
          type: string
      required:
        - children
        - entitySubtype
        - title
    ContainerBase:
      properties:
        entityType:
          $ref: '#/components/schemas/EntityType'
        id:
          format: contentId
          type: string
        title:
          type: string
      required:
        - id
        - entityType
        - title
      type: object
    ContentPostRequest:
      properties:
        contentIds:
          items:
            type: string
          type: array
        objectType:
          enum:
            - FULL
            - SUMMARY
          type: string
      required:
        - contentIds
        - objectType
      type: object
    ContentSummaryBase:
      properties:
        entityType:
          $ref: '#/components/schemas/EntityType'
        id:
          format: id
          type: string
        title:
          type: string
      required:
        - id
        - entityType
        - title
      type: object
    EntityImageShape:
      description: The shape of the entity image
      enum:
        - CIRCULAR
        - SQUARE
      type: string
    EntitySubtypeArticle:
      enum:
        - ARTICLE
      type: string
    EntitySubtypeAudioClip:
      enum:
        - ADVERT
        - HIGHLIGHT
        - SEGMENT
        - SONG
        - SOUNDER
      type: string
    EntitySubtypeCollection:
      enum:
        - COLLECTION
      type: string
    EntitySubtypeEpisode:
      enum:
        - BROADCAST_SHOW_EPISODE
        - HOST_CREATED_EPISODE
        - PODCAST_EPISODE
      type: string
    EntitySubtypePerson:
      enum:
        - PERSON
      type: string
    EntitySubtypeShow:
      enum:
        - BROADCAST_SHOW
        - HOST_CREATED
        - PODCAST
      type: string
    EntitySubtypeStation:
      enum:
        - BROADCAST_RADIO
        - EXCLUSIVE_STATION
        - INTERNET_RADIO
        - PERSONALIZED_RADIO
        - TOPIC_BASED
      type: string
    EntitySubtypeTag:
      enum:
        - GEOGRAPHY
        - TEAM
        - LEAGUE
        - GENRE
        - ORGANIZATION
      type: string
    EntityType:
      enum:
        - ARTICLE
        - CLIP
        - COLLECTION
        - EPISODE
        - TAG
        - PERSON
        - STATION
        - SHOW
      type: string
    Episode:
      allOf:
        - $ref: '#/components/schemas/PlayableBase'
      properties:
        description:
          type: string
        duration:
          format: seconds
          type: number
        endTime:
          format: ISO-8601
          type: string
        entitySubtype:
          $ref: '#/components/schemas/EntitySubtypeEpisode'
        image:
          type: string
        imageAlt:
          type: string
        metaDescription:
          type: string
        metaTitle:
          type: string
        parentId:
          description: ID of associated parent item
          format: contentId
          type: string
        parentStationIds:
          description: ID of associated stations (if available)
          items:
            format: contentId
            type: string
          type: array
        publishDate:
          format: ISO-8601
          type: string
        startTime:
          format: ISO-8601
          type: string
        streamUrls:
          $ref: '#/components/schemas/StreamUrls'
      required:
        - entitySubtype
        - parentId
      type: object
    EpisodeSummary:
      allOf:
        - $ref: '#/components/schemas/PlayableBase'
      properties:
        duration:
          format: seconds
          type: number
        entitySubtype:
          $ref: '#/components/schemas/EntitySubtypeEpisode'
        image:
          type: string
        imageAlt:
          type: string
        parentId:
          description: ID of associated parent
          format: contentId
          type: string
        publishDate:
          format: ISO-8601
          type: string
        stationId:
          description: ID of associated station (if available)
          format: contentId
          type: string
      required:
        - entitySubtype
        - parentId
      type: object
    FeaturedPlayable:
      properties:
        contentObj:
          oneOf:
            - $ref: '#/components/schemas/AudioClip'
            - $ref: '#/components/schemas/Episode'
            - $ref: '#/components/schemas/Station'
        ctaTitle:
          description: Optional title for featured playable CTA
          type: string
      required:
        - contentObj
      type: object
    NavigationTab:
      properties:
        iconRef:
          description: Maps to icon image source on Client
          type: string
        label:
          type: string
        viewId:
          format: viewId
          type: string
        viewType:
          $ref: '#/components/schemas/ViewType'
      type: object
    PlayableBase:
      properties:
        entityType:
          $ref: '#/components/schemas/EntityType'
        id:
          format: contentId
          type: string
        title:
          type: string
      required:
        - id
        - entityType
        - title
      type: object
    ScheduleItem:
      properties:
        endTime:
          format: unix-epoch
          type: number
        image:
          format: imageUrl
          type: string
        imageAlt:
          type: string
        isOnAirOnly:
          type: boolean
        isReplayable:
          type: boolean
        showId:
          format: contentId
          type: string
        startTime:
          format: unix-epoch
          type: number
        stationId:
          format: contentId
          type: string
        title:
          type: string
      required:
        - endTime
        - isOnAirOnly
        - isReplayable
        - startTime
        - stationId
        - title
      type: object
    SearchRequest:
      properties:
        includes:
          properties:
            entityTypes:
              items:
                $ref: '#/components/schemas/EntityType'
              type: array
          type: object
        limit:
          type: number
        page:
          type: number
        term:
          minLength: 2
          type: string
      required:
        - term
      type: object
    SearchResult:
      properties:
        duration:
          format: seconds
          type: number
        entitySubtype:
          oneOf:
            - $ref: '#/components/schemas/EntitySubtypeAudioClip'
            - $ref: '#/components/schemas/EntitySubtypeEpisode'
            - $ref: '#/components/schemas/EntitySubtypeTag'
            - $ref: '#/components/schemas/EntitySubtypeShow'
            - $ref: '#/components/schemas/EntitySubtypeStation'
        entityType:
          $ref: '#/components/schemas/EntityType'
        id:
          format: contentId
          type: string
        image:
          format: imageUrl
          type: string
        imageAlt:
          type: string
        parentId:
          format: contentId
          type: string
        publishDate:
          format: ISO-8601
          type: string
        title:
          type: string
        viewId:
          type: string
        viewType:
          $ref: '#/components/schemas/ViewType'
      required:
        - id
        - entityType
        - entitySubtype
        - viewId
        - viewType
      type: object
    Show:
      allOf:
        - $ref: '#/components/schemas/ContainerBase'
      properties:
        colors:
          properties:
            primary:
              format: hexColor
              type: string
            secondary:
              format: hexColor
              type: string
          type: object
        description:
          type: string
        entitySubtype:
          $ref: '#/components/schemas/EntitySubtypeShow'
        followable:
          type: boolean
        image:
          format: imageUrl
          type: string
        imageAlt:
          type: string
        metaDescription:
          type: string
        metaTitle:
          type: string
        publisher:
          type: string
        subtitle:
          type: string
        title:
          type: string
      required:
        - entitySubtype
        - followable
      type: object
    ShowSummary:
      allOf:
        - $ref: '#/components/schemas/ContentSummaryBase'
      properties:
        entitySubtype:
          $ref: '#/components/schemas/EntitySubtypeShow'
        image:
          format: imageUrl
          type: string
        imageAlt:
          type: string
      required:
        - entitySubtype
      type: object
    Station:
      allOf:
        - $ref: '#/components/schemas/PlayableBase'
      properties:
        colors:
          properties:
            primary:
              format: hexColor
              type: string
            secondary:
              format: hexColor
              type: string
          type: object
        description:
          type: string
        entitySubtype:
          $ref: '#/components/schemas/EntitySubtypeStation'
        followable:
          type: boolean
        image:
          format: imageUrl
          type: string
        imageAlt:
          type: string
        metaDescription:
          type: string
        metaTitle:
          type: string
        phoneNumber:
          type: number
        siteSlug:
          type: string
        streamProvider:
          $ref: '#/components/schemas/StreamProvider'
        streamUrls:
          $ref: '#/components/schemas/StreamUrls'
        tritonName:
          description: Required for Triton stations
          type: string
        website:
          type: string
      required:
        - entitySubtype
        - followable
        - metaDescription
        - metaTitle
        - siteSlug
        - streamProvider
        - streamUrls
      type: object
    StationSummary:
      allOf:
        - $ref: '#/components/schemas/ContentSummaryBase'
      properties:
        entitySubtype:
          $ref: '#/components/schemas/EntitySubtypeStation'
        image:
          format: imageUrl
          type: string
        imageAlt:
          type: string
      required:
        - entitySubtype
      type: object
    StreamProvider:
      enum:
        - STREAM_GUYS
        - TRITON
        - WIDE_ORBIT
      type: string
    StreamUrls:
      additionalProperties:
        description: A fully qualified URL to stream
        type: string
        x-additionalPropertiesName: format
      description: >-
        Object representing container formats (i.e. HLS) as keys and stream URLs
        as values
      type: object
    Tag:
      allOf:
        - $ref: '#/components/schemas/ContainerBase'
      properties:
        colors:
          properties:
            primary:
              format: hexColor
              type: string
            secondary:
              format: hexColor
              type: string
          type: object
        entitySubtype:
          $ref: '#/components/schemas/EntitySubtypeTag'
        followable:
          type: boolean
        image:
          format: imageUrl
          type: string
        imageAlt:
          type: string
        metaDescription:
          type: string
        metaTitle:
          type: string
        storyCollection:
          $ref: '#/components/schemas/StoryCollection'
      required:
        - entitySubtype
        - followable
      type: object
    TagSummary:
      allOf:
        - $ref: '#/components/schemas/ContentSummaryBase'
      properties:
        entitySubtype:
          $ref: '#/components/schemas/EntitySubtypeTag'
        image:
          format: imageUrl
          type: string
        imageAlt:
          type: string
      required:
        - entitySubtype
      type: object
    ViewModule:
      properties:
        config:
          $ref: '#/components/schemas/ViewModuleConfig'
          description: Config object for component type
        moduleId:
          type: string
        moduleType:
          $ref: '#/components/schemas/ViewModuleType'
          description: Module type mapped to UI component
        modules:
          items:
            $ref: '#/components/schemas/ViewModule'
          type: array
      required:
        - moduleId
      type: object
    ViewModuleConfig:
      properties:
        carouselType:
          $ref: '#/components/schemas/CarouselType'
        contentId:
          type: string
        entityImageShape:
          $ref: '#/components/schemas/EntityImageShape'
        eyebrow:
          type: string
        footer:
          $ref: '#/components/schemas/ViewModuleTitle'
        headerCta:
          $ref: '#/components/schemas/ViewModuleTitle'
        images:
          items:
            type: string
          type: array
        itemsPerColumn:
          type: number
        itemsPerRow:
          type: number
        numberOfLines:
          type: number
        subtitle:
          type: string
        text:
          type: string
        title:
          $ref: '#/components/schemas/ViewModuleTitle'
        titleFragments:
          type: array
        type:
          enum:
            - LARGE
            - SMALL
          type: string
        viewId:
          format: viewId
          type: string
        viewType:
          $ref: '#/components/schemas/ViewType'
      type: object
    ViewModuleTitle:
      properties:
        contentId:
          type: string
        label:
          type: string
        viewId:
          format: viewId
          type: string
        viewType:
          $ref: '#/components/schemas/ViewType'
      type: object
    ViewModuleType:
      description: Module type mapped to UI component
      enum:
        - CAROUSEL
        - ENTITY_CARD_IMAGE_GROUP
        - ENTITY_CARD_FEATURED
        - ENTITY_CARD_HORIZONTAL
        - ENTITY_CARD_VERTICAL
        - LIST
        - SECTION_WRAPPER
        - STORIES
        - VIEW_TITLE
        - TEXT_BLOCK
      type: string
    ViewType:
      description: UI view invoked by CTA
      enum:
        - MODULES
        - MY_AUDIO
        - SHOW
        - STATION
        - EPISODE
        - TAG
        - SET_LOCATION
      type: string
    Event:
      properties:
        context:
          $ref: '#/components/schemas/EventSource'
        eventType:
          $ref: '#/components/schemas/EventType'
        target:
          $ref: '#/components/schemas/EventSource'
        timestamp:
          format: ISO-8601
          type: string
      type: object
    EventContext:
      enum:
        - VIEW
        - OS_UI
        - API
      type: string
    EventSource:
      properties:
        auxData:
          additionalProperties: {}
          type: object
        id:
          type: string
        type:
          $ref: '#/components/schemas/EventContext'
      type: object
    EventType:
      enum:
        - VIEW
        - CLICK
        - SCROLL
        - PLAY
      type: string
    StoryBase:
      properties:
        config:
          $ref: '#/components/schemas/StoryConfigBase'
        contentId:
          format: contentId
          type: string
        contentType:
          $ref: '#/components/schemas/EntityType'
        isPromoted:
          type: boolean
      required:
        - config
        - contentId
        - contentType
        - isPromoted
      type: object
    StoryClip:
      properties:
        contentId:
          format: contentId
          type: string
        eyebrow:
          type: string
      required:
        - contentId
      type: object
    StoryCollection:
      allOf:
        - $ref: '#/components/schemas/StoryBase'
      properties:
        clips:
          items:
            $ref: '#/components/schemas/StoryClip'
          type: array
        config:
          allOf:
            - $ref: '#/components/schemas/StoryConfigBase'
          properties:
            contentId:
              format: contentId
              type: string
            viewId:
              format: viewId
              type: string
            viewType:
              $ref: '#/components/schemas/ViewType'
          type: object
      required:
        - clips
        - config
      type: object
    StoryConfigBase:
      properties:
        colors:
          properties:
            outline:
              description: Outline of story avatar
              format: hexColor
              type: string
            overlay:
              description: Background of story overlay
              format: hexColor
              type: string
          required:
            - outline
            - overlay
          type: object
      required:
        - colors
      type: object
    StoryLiveEpisode:
      allOf:
        - $ref: '#/components/schemas/StoryBase'
      properties:
        config:
          allOf:
            - $ref: '#/components/schemas/StoryConfigBase'
          properties:
            parentContentId:
              description: ID of parent show (used to fetch title and image)
              format: contentId
              type: string
          required:
            - colors
            - parentContentId
          type: object
      required:
        - config
      type: object
paths:
  /profile/v1/follows:
    get:
      description: >-
        The purpose of this endpoint is for the Client to compare Content IDs
        from Experience to match follow status.
      operationId: getFollows
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/Aud-Correlation-Id'
        - $ref: '#/components/parameters/Aud-Platform'
        - $ref: '#/components/parameters/Aud-Platform-Variant'
        - $ref: '#/components/parameters/Aud-Session-Id'
        - $ref: '#/components/parameters/Aud-Uuid'
      responses:
        '200':
          $ref: '#/components/responses/FollowsResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
      summary: Retrieve followed content IDs
      tags:
        - follows
    post:
      operationId: postFollows
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/Aud-Correlation-Id'
        - $ref: '#/components/parameters/Aud-Platform'
        - $ref: '#/components/parameters/Aud-Platform-Variant'
        - $ref: '#/components/parameters/Aud-Session-Id'
        - $ref: '#/components/parameters/Aud-Uuid'
      responses:
        '201':
          description: OK
        '500':
          $ref: '#/components/responses/ErrorResponse'
      summary: Follow new content IDs
      tags:
        - follows
  /profile/v1/queue:
    get:
      description: >-
        The purpose of this endpoint is for the Client to compare Content IDs
        from Experience to synchronize its playback queue
      operationId: getQueue
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/Aud-Correlation-Id'
        - $ref: '#/components/parameters/Aud-Platform'
        - $ref: '#/components/parameters/Aud-Platform-Variant'
        - $ref: '#/components/parameters/Aud-Session-Id'
        - $ref: '#/components/parameters/Aud-Uuid'
      responses:
        '200':
          $ref: '#/components/responses/QueueResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
      summary: Retrieve queued content IDs
      tags:
        - queue
    put:
      operationId: putQueue
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/Aud-Correlation-Id'
        - $ref: '#/components/parameters/Aud-Platform'
        - $ref: '#/components/parameters/Aud-Platform-Variant'
        - $ref: '#/components/parameters/Aud-Session-Id'
        - $ref: '#/components/parameters/Aud-Uuid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Queue'
      responses:
        '201':
          description: OK
        '500':
          $ref: '#/components/responses/ErrorResponse'
      summary: Update the user's playback queue
      tags:
        - queue
  /profile/v1/recents:
    get:
      operationId: getRecents
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/Aud-Correlation-Id'
        - $ref: '#/components/parameters/Aud-Platform'
        - $ref: '#/components/parameters/Aud-Platform-Variant'
        - $ref: '#/components/parameters/Aud-Session-Id'
        - $ref: '#/components/parameters/Aud-Uuid'
      responses:
        '200':
          $ref: '#/components/responses/RecentsResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
      summary: >-
        Retrieve the user's recently played items (content IDs and timestamp -
        last played)
      tags:
        - recents
    post:
      operationId: postRecents
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/Aud-Correlation-Id'
        - $ref: '#/components/parameters/Aud-Platform'
        - $ref: '#/components/parameters/Aud-Platform-Variant'
        - $ref: '#/components/parameters/Aud-Session-Id'
        - $ref: '#/components/parameters/Aud-Uuid'
      requestBody:
        content:
          application/json:
            schema:
              items:
                allOf:
                  - $ref: '#/components/schemas/RecentsItem'
      responses:
        '201':
          description: OK
        '500':
          $ref: '#/components/responses/ErrorResponse'
      summary: >-
        Update/store the user's recently played items (content IDs and timestamp
        - last played)
      tags:
        - recents
  /profile/v1/users:
    post:
      operationId: postNewUserProfile
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/UserProfile'
              description: API request for POST new user.
              required:
                - dateOfBirth
                - emailAddress
                - gender
                - userId
                - userType
                - zipCode
              type: object
      responses:
        '201':
          $ref: '#/components/responses/ProfilePostResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse'
        '409':
          $ref: '#/components/responses/ErrorResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
      summary: Create new user profile
      tags:
        - users
  /profile/v1/users/{id}:
    delete:
      operationId: deleteUserProfile
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/ProfileDeleteResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
      summary: Delete user profile
      tags:
        - users
    get:
      operationId: getUserProfile
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/ProfileGetResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse'
        '409':
          $ref: '#/components/responses/ErrorResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
      summary: Retrieve user profile
      tags:
        - users
    patch:
      operationId: patchUserProfile
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/UserProfile'
              description: API request for PATCH a user.
              minProperties: 1
              type: object
      responses:
        '200':
          $ref: '#/components/responses/ProfilePatchResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse'
        '409':
          $ref: '#/components/responses/ErrorResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
      summary: Update user profile
      tags:
        - users
  /experience/v1/content:
    post:
      description: Retrieve multiple content objects by ID
      operationId: postExperienceContent
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/Aud-Correlation-Id'
        - $ref: '#/components/parameters/Aud-Platform'
        - $ref: '#/components/parameters/Aud-Platform-Variant'
        - $ref: '#/components/parameters/Aud-Session-Id'
        - $ref: '#/components/parameters/Aud-Uuid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContentPostRequest'
      responses:
        '200':
          $ref: '#/components/responses/ExperienceContentPostResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
      summary: Multiple content objects
      tags:
        - experience
  /experience/v1/content/{contentId}/chapters:
    get:
      description: Retrieve list of chapters/segments associated with content ID
      operationId: getContentChapters
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/Aud-Correlation-Id'
        - $ref: '#/components/parameters/Aud-Platform'
        - $ref: '#/components/parameters/Aud-Platform-Variant'
        - $ref: '#/components/parameters/Aud-Session-Id'
        - $ref: '#/components/parameters/Aud-Uuid'
        - description: Content ID
          in: path
          name: contentId
          required: true
          schema:
            format: contentId
            type: string
      responses:
        '200':
          $ref: '#/components/responses/ExperienceChaptersResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
      summary: Content chapter collection
      tags:
        - experience
  /experience/v1/content/{contentId}/episodes:
    get:
      description: Retrieve list of episodes associated with content ID
      operationId: getContentEpisodes
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/Aud-Correlation-Id'
        - $ref: '#/components/parameters/Aud-Platform'
        - $ref: '#/components/parameters/Aud-Platform-Variant'
        - $ref: '#/components/parameters/Aud-Session-Id'
        - $ref: '#/components/parameters/Aud-Uuid'
        - $ref: '#/components/parameters/SearchPage'
        - $ref: '#/components/parameters/SearchLimit'
        - description: Content ID
          in: path
          name: contentId
          required: true
          schema:
            format: contentId
            type: string
      responses:
        '200':
          $ref: '#/components/responses/ExperienceEpisodesResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
      summary: Content episode collection
      tags:
        - experience
  /experience/v1/content/{contentId}/schedule:
    get:
      description: Retrieve schedule for Station or Show
      operationId: getContentSchedule
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/Aud-Correlation-Id'
        - $ref: '#/components/parameters/Aud-Platform'
        - $ref: '#/components/parameters/Aud-Platform-Variant'
        - $ref: '#/components/parameters/Aud-Session-Id'
        - $ref: '#/components/parameters/Aud-Uuid'
        - description: Content ID
          in: path
          name: contentId
          required: true
          schema:
            format: contentId
            type: string
        - description: Start date for schedule
          in: query
          name: startDate
          schema:
            format: ISO-8601
            type: string
        - description: End date for schedule (inclusive)
          in: query
          name: endDate
          schema:
            format: ISO-8601
            type: string
      responses:
        '200':
          $ref: '#/components/responses/ExperienceScheduleResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
      summary: Content schedule
      tags:
        - experience
  /experience/v1/follows:
    get:
      description: Retrieve list of Follows represented by Content Summaries
      operationId: getExperienceFollows
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/Aud-Correlation-Id'
        - $ref: '#/components/parameters/Aud-Platform'
        - $ref: '#/components/parameters/Aud-Platform-Variant'
        - $ref: '#/components/parameters/Aud-Session-Id'
        - $ref: '#/components/parameters/Aud-Uuid'
      responses:
        '200':
          $ref: '#/components/responses/ExperienceFollowsResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
      summary: User follows
      tags:
        - experience
  /experience/v1/navigation:
    get:
      description: JSON representation of global navigation.
      operationId: getClientNavigation
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/Aud-Correlation-Id'
        - $ref: '#/components/parameters/Aud-Platform'
        - $ref: '#/components/parameters/Aud-Platform-Variant'
        - $ref: '#/components/parameters/Aud-Session-Id'
        - $ref: '#/components/parameters/Aud-Uuid'
      responses:
        '200':
          $ref: '#/components/responses/GlobalNavigationResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
      summary: Retrieve Client navigation
      tags:
        - experience
  /experience/v1/now-playing:
    get:
      description: Retrieve currently playing details by content ID
      operationId: getExperienceNowPlaying
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/Aud-Correlation-Id'
        - $ref: '#/components/parameters/Aud-Platform'
        - $ref: '#/components/parameters/Aud-Platform-Variant'
        - $ref: '#/components/parameters/Aud-Session-Id'
        - $ref: '#/components/parameters/Aud-Uuid'
        - description: Pipe-separated list of content IDs
          in: query
          name: contentIds
          required: true
          schema:
            items:
              format: contentId
              type: string
            type: array
          style: pipeDelimited
      responses:
        '200':
          $ref: '#/components/responses/NowPlayingResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
      summary: Now playing
      tags:
        - experience
  /experience/v1/search:
    post:
      description: >-
        Free text and category-based search with filtering, sorting, and
        pagination.
      operationId: postSearch
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/Aud-Correlation-Id'
        - $ref: '#/components/parameters/Aud-Platform'
        - $ref: '#/components/parameters/Aud-Platform-Variant'
        - $ref: '#/components/parameters/Aud-Session-Id'
        - $ref: '#/components/parameters/Aud-Uuid'
        - $ref: '#/components/parameters/SearchPage'
        - $ref: '#/components/parameters/SearchLimit'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
      responses:
        '200':
          $ref: '#/components/responses/SearchResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
      summary: Search
      tags:
        - experience
  /experience/v1/search/suggested-terms:
    get:
      description: Retrieve list of suggested search terms.
      operationId: getSearchSuggestedTerms
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/Aud-Correlation-Id'
        - $ref: '#/components/parameters/Aud-Platform'
        - $ref: '#/components/parameters/Aud-Platform-Variant'
        - $ref: '#/components/parameters/Aud-Session-Id'
        - $ref: '#/components/parameters/Aud-Uuid'
      responses:
        '200':
          $ref: '#/components/responses/SearchSuggestedTermsResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
      summary: Suggested search terms
      tags:
        - experience
  /experience/v1/view/{viewId}:
    get:
      description: Layout and content summary objects.
      operationId: getExperienceViewById
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/Aud-Correlation-Id'
        - $ref: '#/components/parameters/Aud-Platform'
        - $ref: '#/components/parameters/Aud-Platform-Variant'
        - $ref: '#/components/parameters/Aud-Session-Id'
        - $ref: '#/components/parameters/Aud-Uuid'
        - description: Experience View ID
          in: path
          name: viewId
          required: true
          schema:
            format: viewId
            type: string
      responses:
        '200':
          $ref: '#/components/responses/ExperienceViewResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
      summary: Experience view by ID
      tags:
        - experience
  /experience/v1/view/{viewId}/{contentId}:
    get:
      description: Resolve a CMS view with selected content entity.
      operationId: getExperienceByViewAndContentId
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/Aud-Correlation-Id'
        - $ref: '#/components/parameters/Aud-Platform'
        - $ref: '#/components/parameters/Aud-Platform-Variant'
        - $ref: '#/components/parameters/Aud-Session-Id'
        - $ref: '#/components/parameters/Aud-Uuid'
        - description: Experience View ID
          in: path
          name: viewId
          required: true
          schema:
            format: viewId
            type: string
        - in: path
          name: contentId
          required: true
          schema:
            format: contentId
            type: string
      responses:
        '200':
          $ref: '#/components/responses/ExperienceContentViewResponse'
          description: OK
        '500':
          $ref: '#/components/responses/ErrorResponse'
      summary: Experience view by view and content ID
      tags:
        - experience
  /events/v1:
    post:
      operationId: postEvents
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/Aud-Correlation-Id'
        - $ref: '#/components/parameters/Aud-Platform'
        - $ref: '#/components/parameters/Aud-Platform-Variant'
        - $ref: '#/components/parameters/Aud-Session-Id'
        - $ref: '#/components/parameters/Aud-Uuid'
      responses:
        '200':
          description: OK
        '500':
          $ref: '#/components/responses/ErrorResponse'
      summary: Push collection of events
      tags:
        - events
  /experience/v1/stories:
    get:
      description: Get the latest stories for the user to consume
      operationId: getStories
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/Aud-Correlation-Id'
        - $ref: '#/components/parameters/Aud-Platform'
        - $ref: '#/components/parameters/Aud-Platform-Variant'
        - $ref: '#/components/parameters/Aud-Session-Id'
        - $ref: '#/components/parameters/Aud-Uuid'
        - description: The timestamp of the last fetch
          in: query
          name: since
          required: false
          schema:
            format: ISO-8601
            type: string
      responses:
        '200':
          $ref: '#/components/responses/ExperienceStoriesResponse'
        '304':
          description: Not Modified
        '500':
          $ref: '#/components/responses/ErrorResponse'
      tags:
        - experience
info:
  description: Audacy 2.0 API Gateway proposal.
  title: Audacy API Gateway
  version: 3.0.0

